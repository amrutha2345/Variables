Event Handling in React
Event handling in react is how you make your app do something when the user interacts woth it.
Like clicking a button,submitting a form
1)Clicking a button(onClick)
2)pressing a key(keyDomain)
3)Moving the Mouse(onMouseMove)
4)Typing a text box(onChange)
How to use Events in React
use camelCase for event name
import React from'react';
function App(){
  const handleClick =()=>{
      alert("Button Clicked");
  };
  return(
      <button onClick={handleClick}>CLICK ME!!</button>
  )
}
export default App;
OUTPUT:
 
 
b)Change event(onChange):
This Happens when you type in a text box
KeyPoints:	
Target is a property of the event object ,and is predefined by javascript for DOM events 
Event target  always refers to the element that triggers the event
import React,{useState} from 'react';
function App(){
  const[text, setText]=useState("")
  //initally the value is iset as empty string
  const handleChange=(event)=>{
    setText(event.target.value)
  }
  return(
    <div>
    <input type="text" value={text} onChange={handleChange}/>
    <p>your text:{text}</p>
    </div>
  );
}
export default App;
Output:
 
import React, { useState } from "react";

function App() {
  const [isHovered, setIsHovered] = useState(false);

  const handleMouseEnter = () => {
    setIsHovered(true);
    // Set as true when the mouse enters
  };

  const handleMouseLeave = () => {
    setIsHovered(false);
  };

  return (
    <div>
      <button 
        onMouseEnter={handleMouseEnter} 
        onMouseLeave={handleMouseLeave}
        style={{ 
          backgroundColor: isHovered ? "lightblue" : "lightgray", 
          color: isHovered ? "white" : "black" 
        }}
      >
        Hover me
      </button>
      {isHovered && <p>Mouse is over the button</p>}
    </div>
  );
}

export default App;



